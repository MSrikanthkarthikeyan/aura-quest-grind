
export interface AIQuestRequest {
  roles: string[];
  goals: string[];
  skillLevel: 'Beginner' | 'Intermediate' | 'Advanced';
  timeCommitment: string;
  fitnessTypes?: string[];
}

export interface AIQuestResponse {
  title: string;
  duration: string;
  subtasks: string[];
  difficulty: 'Easy' | 'Moderate' | 'Hard';
  frequency: 'Daily' | 'Weekly' | 'Once' | 'Custom';
  category: string;
  xpReward: number;
}

const GEMINI_API_KEY = 'AIzaSyCh_5H3df-gsWXiQWbD7aG5br6FD0jE1sI';
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';

export const generateAIQuests = async (request: AIQuestRequest): Promise<AIQuestResponse[]> => {
  console.log('Gemini API: Starting quest generation with request:', request);
  const prompt = createQuestPrompt(request);
  console.log('Gemini API: Generated prompt:', prompt);
  
  try {
    console.log('Gemini API: Making request to:', `${GEMINI_API_URL}?key=${GEMINI_API_KEY.substring(0, 10)}...`);
    
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          maxOutputTokens: 2048,
        }
      })
    });

    console.log('Gemini API: Response status:', response.status);
    console.log('Gemini API: Response ok:', response.ok);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API: Error response body:', errorText);
      throw new Error(`Gemini API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('Gemini API: Full response data:', data);
    
    const generatedText = data.candidates[0]?.content?.parts[0]?.text;
    console.log('Gemini API: Generated text:', generatedText);
    
    if (!generatedText) {
      console.error('Gemini API: No content generated');
      throw new Error('No content generated by Gemini AI');
    }

    const parsedQuests = parseAIResponse(generatedText);
    console.log('Gemini API: Parsed quests:', parsedQuests);
    
    return parsedQuests;
  } catch (error) {
    console.error('Gemini API: Error generating AI quests:', error);
    throw error;
  }
};

const createQuestPrompt = (request: AIQuestRequest): string => {
  const rolesText = request.roles.join(', ');
  const goalsText = request.goals.join(', ');
  const fitnessText = request.fitnessTypes ? `, with fitness focus on ${request.fitnessTypes.join(', ')}` : '';

  return `Generate 3-5 personalized quests for a user who is a ${rolesText} aiming to ${goalsText}. The user is a ${request.skillLevel} level and has ${request.timeCommitment} available${fitnessText}.

Please provide your response in the following JSON format:
[
  {
    "title": "Quest title (gamified, RPG-themed like 'Shadow Script Practice' or 'Algorithm Abyss')",
    "duration": "Realistic time estimate (e.g., '30 minutes', '2 hours')",
    "subtasks": ["actionable step 1", "actionable step 2", "actionable step 3"],
    "difficulty": "Easy|Moderate|Hard",
    "frequency": "Daily|Weekly|Once|Custom",
    "category": "Tech|Academics|Business|Content|Fitness|Personal",
    "xpReward": 25-100
  }
]

Requirements:
- Use engaging, RPG-themed quest titles
- Keep subtasks actionable and motivational
- Match difficulty to user's skill level
- Ensure time estimates are realistic
- Categories should match: Tech, Academics, Business, Content, Fitness, Personal
- XP rewards: Easy (25-40), Moderate (45-70), Hard (75-100)

Return only the JSON array, no additional text.`;
};

const parseAIResponse = (response: string): AIQuestResponse[] => {
  console.log('Parsing AI response:', response);
  
  try {
    // Clean the response to extract JSON
    const jsonMatch = response.match(/\[[\s\S]*\]/);
    if (!jsonMatch) {
      console.error('No JSON array found in response');
      throw new Error('No JSON array found in response');
    }
    
    const cleanedResponse = jsonMatch[0];
    console.log('Extracted JSON:', cleanedResponse);
    
    const quests = JSON.parse(cleanedResponse);
    console.log('Parsed JSON quests:', quests);
    
    const mappedQuests = quests.map((quest: any) => ({
      title: quest.title || 'Generated Quest',
      duration: quest.duration || '30 minutes',
      subtasks: Array.isArray(quest.subtasks) ? quest.subtasks : [],
      difficulty: quest.difficulty || 'Moderate',
      frequency: quest.frequency || 'Daily',
      category: quest.category || 'Personal',
      xpReward: quest.xpReward || 35,
    }));
    
    console.log('Final mapped quests:', mappedQuests);
    return mappedQuests;
  } catch (error) {
    console.error('Error parsing AI response:', error);
    // Return fallback quest if parsing fails
    const fallbackQuests = [{
      title: 'Custom AI Quest',
      duration: '30 minutes',
      subtasks: ['Complete your daily challenge', 'Track your progress'],
      difficulty: 'Moderate' as const,
      frequency: 'Daily' as const,
      category: 'Personal',
      xpReward: 35,
    }];
    
    console.log('Returning fallback quests:', fallbackQuests);
    return fallbackQuests;
  }
};
